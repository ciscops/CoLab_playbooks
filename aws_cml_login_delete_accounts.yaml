---
- hosts: localhost
  gather_facts: no
  vars:
    cml_servers: "{{ cml_server_list }}"
    colab_user_password: "{{ colab_user_password }}"
    colab_email: "{{ colab_user_email }}"
    colab_username: "{{ colab_user_username }}"
    cml_admin_account: "{{ cml_admin_account }}"
    cml_admin_password: "{{ cml_admin_password }}"
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    wxt_bearer: "{{ wxt_bearer }}"
    api_cml_authenticate: '/api/v0/authenticate'
    api_cml_create_account: '/api/v0/users/'
    api_cml_get_diagnostics: '/api/v0/diagnostics'
    cml_results: []
    message: ''
  tasks:
  - name: Get Admin CML Tokens
    uri:
      url: "{{ item + api_cml_authenticate }}"
      method: POST
      return_content: yes
      body: "{{ {'username': cml_admin_account, 'password': cml_admin_password} | to_json }}"
      validate_certs: no
    register: token_results
    ignore_errors: yes
    with_items: "{{ cml_servers }}"
  - name: Get CML Diagnostics
    uri:
      url: "{{ item.item + api_cml_get_diagnostics }}"
      method: GET
      return_content: yes
      body_format: json
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.json | default('') }}'}"
    when: item.failed == false
    register: diagnostics
    ignore_errors: yes
    with_items: "{{ token_results.results }}"
  - name: Create Lists of User's labs
    vars:
      cml_labs: []
    set_fact:
      cml_labs: "{{ cml_labs }} + [ { 'server': '{{ item.item.item }}', 'labs': {{ item.json.user_roles.labs_by_user[colab_username] | default([]) }}, 'admin_token': '{{ item.item.json }}' } ]"
    ignore_errors: yes
    when: item.item.failed == false
    loop: "{{ diagnostics.results }}"
  - name: Get User's CML Token
    uri:
      url: "{{ item + api_cml_authenticate }}"
      method: POST
      return_content: yes
      body: "{{ {'username': colab_username, 'password': colab_user_password} | to_json }}"
      validate_certs: no
    register: token_results_user
    ignore_errors: yes
    with_items: "{{ cml_servers }}"
  - name: Create User Token to Server Dictionary
    vars:
      user_token_server_dict: []
    set_fact:
      user_token_server_dict: "{{ user_token_server_dict | combine({item.item: item.json  | default('') })}}"
    when: item.failed == false
    ignore_errors: yes
    with_items: "{{ token_results_user.results }}"
  - name: Create Full Dictionary with labs user token and admin token
    vars:
      complete_cml_labs: []
    set_fact:
      complete_cml_labs: "{{ complete_cml_labs }} + [ {{ item | combine({'user_token': user_token_server_dict[item.server]}) }} ]"
    ignore_errors: yes
    with_items: "{{ cml_labs }}"
  - name: Flatten results since haven't figured out loops in loops in ansible
    vars:
      flat_list_over_servers_labs_tokens: []
    set_fact:
      flat_list_over_servers_labs_tokens: "{{ flat_list_over_servers_labs_tokens }} + [ {{ {'lab': item.1, 'server': item.0.server, 'admin_token': item.0.admin_token, 'user_token': item.0.user_token } }} ]"
    ignore_errors: yes
    loop: "{{ complete_cml_labs | subelements('labs', 'skip_missing=True') }}"
  - name: Stop CML Labs
    uri:
      url: "{{ item.server  + '/api/v0/labs/' + item.lab + '/stop' }}"
      method: PUT
      return_content: yes
      body_format: json
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.user_token | default('') }}'}"
    ignore_errors: yes
    with_items: "{{ flat_list_over_servers_labs_tokens }}"
  - name: Wipe CML Labs
    uri:
      url: "{{ item.server  + '/api/v0/labs/' + item.lab + '/wipe' }}"
      method: PUT
      return_content: yes
      body_format: json
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.user_token | default('') }}'}"
    ignore_errors: yes
    with_items: "{{ flat_list_over_servers_labs_tokens }}"
  - name: Delete CML Labs
    uri:
      url: "{{ item.server  + '/api/v0/labs/' + item.lab }}"
      method: DELETE
      return_content: yes
      body_format: json
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.user_token | default('') }}'}"
    ignore_errors: yes
    with_items: "{{ flat_list_over_servers_labs_tokens }}"
  - name: Delete CML Account
    uri:
      url: "{{ item.item  + '/api/v0/users/' + colab_username }}"
      method: DELETE
      return_content: yes
      body_format: json
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.json | default('') }}'}"
    ignore_errors: yes
    register: cml_delete_results
    with_items: "{{ token_results.results }}"
  - name: Add Delete Success to CML results
    vars:
      temp_list: [{ 'server': '{{ item.item.item }}', 'status_code': '{{ item.status }}'}]
    set_fact:
      cml_results: "{{ cml_results + temp_list }}"
    ignore_errors: yes
    with_items: "{{ cml_delete_results.results }}"
  - name: Create Success messages for CML
    set_fact:
      message: "{{ message + ' - ' + item.server.replace('https://', '') + ' ' + 'Account Deleted! \n' }}"
      check_flag: true
    when: item.status_code == '200'
    ignore_errors: yes
    with_items: "{{ cml_results }}"
  - name: Create Fail messages for CML
    set_fact:
      message: "{{ message + ' - ' + item.server.replace('https://', '') + ' ' + 'Failed: ' + item.status_code + ' \n' }}"
    ignore_errors: yes
    when: item.status_code != '200'
    with_items: "{{ cml_results }}"
  - name: Delete AWS Account
    iam:
      iam_type: user
      name: "{{ colab_username }}"
      state: absent
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
    register: iam_user
    ignore_errors: true
  - name: Create Success message for AWS
    set_fact:
      message: "{{ message + ' - ' + 'AWS Account Deleted! \n' }}"
      check_flag: true
    when: iam_user.changed == true and iam_user.failed == false # and did't fail
  - name: Create Fail messages for AWS
    set_fact:
      message: "{{ message + ' - ' + 'AWS Account Deletion Failed: ' + iam_user.msg + ' \n' }}"
    when: iam_user.changed == false or iam_user.failed == false
    ignore_errors: true

- hosts: login
  gather_facts: no
  connection: ssh
  tasks:
    - name: Remove user
      user:
        name: "{{ hostvars['localhost']['colab_username'] }}"
        state: absent
        remove: yes
      ignore_errors: true
      register: login_server_user
    - name: Delete Success message for Login Server
      set_fact:
        message: "{{ hostvars['localhost']['message'] + ' - ' + inventory_hostname + ' Account Deleted! \n' }}"
      when: login_server_user.changed == true and login_server_user.failed == false
      ignore_errors: true
    - name: Delete Fail message for Login Server
      set_fact:
        message: "{{ hostvars['localhost']['message'] + ' - ' + inventory_hostname + ' Account Deletion Failed! \n' }}"
      when: login_server_user.failed == true
      ignore_errors: true

- hosts: localhost
  gather_facts: no
  tasks:
  - name: Send WxT Message
    uri:
      url: "https://api.ciscospark.com/v1/messages"
      method: POST
      return_content: yes
      body: "{{ {'toPersonEmail': colab_email, 'markdown': hostvars[groups['login'][0]].message } | to_json }}"
      validate_certs: no
      headers: "{{ {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + wxt_bearer } }}"
