---
- hosts: localhost
  gather_facts: no
  ignore_unreachable: yes
  vars:
    cml_servers: "{{ cml_server_list }}"                          # From POST
    colab_email: "{{ colab_user_email }}"                         # From POST
    colab_username: "{{ colab_user_username }}"                   # From POST
    vcenter_address: "{{ vcenter_address }}"                      # From POST
    cml_admin_account: "{{ cml_account }}"                        # From Vault
    cml_admin_password: "{{ cml_password }}"                      # From Vault
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"     # From Vault
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}" # From Vault

    aws_access_key_prod: "{{ aws_prod_key_vault }}"                # From Vault
    aws_secret_key_prod: "{{ aws_prod_token_vault }}"              # From Vault
    aws_region_prod: "{{ aws_prod_region_vault }}"                 # From Vault
    colabot_cipher: "{{ cipher_vault }}"                           # From Vault

    iam_group: "{{ aws_iam_group_vault }}"                        # From Vault
    wxt_bearer: "{{ wxt_bearer_vault }}"                          # From Vault
    vcenter_user_group: "{{ vcenter_sso_group_vault }}"           # From Vault
    vcenter_admin_username: "{{ vcenter_admin_account_vault }}"   # From Vault
    vcenter_admin_password: "{{ vcenter_admin_password_vault }}"  # From Vault
    meraki_key: "{{ meraki_auth_vault }}"                         # From Vault
    networkId: "{{ meraki_netid_vault }}"                         # From Vault
    cml_results: []
    check_flag: false
    aws_potential_reset_flag: false
    successful_aws_creation: false
    api_cml_authenticate: '/api/v0/authenticate'
    api_cml_create_account: '/api/v0/users/'
    message: ''
    meraki_account_id: ""
  tasks:
  - name: Generate Initial Password
    generate_password:
    register: results
  - name: Save initial password
    set_fact:
      colab_user_password_init: "{{ results.meta }}"
  - name: Generate Final Password
    generate_password:
    register: results
  - name: Save final password
    set_fact:
      colab_user_password_final: "{{ results.meta }}"
  - name: Get CML Tokens
    uri:
      url: "{{ item + api_cml_authenticate }}"
      method: POST
      return_content: yes
      body: "{{ {'username': cml_admin_account, 'password': cml_admin_password} | to_json }}"
      validate_certs: no
    register: token_results
    ignore_errors: yes
    with_items: "{{ cml_servers }}"
  - name: Add failures to CML results
    set_fact:
      cml_results: "{{ cml_results }} + [ { 'server': '{{ item.item }}', 'status_code': '{{ item.status }}' }]"
    when: item.failed == true
    ignore_errors: yes
    with_items: "{{ token_results.results }}"
  - name: Create CML Accounts
    uri:
      url: "{{ item.item + api_cml_create_account + colab_username }}"
      method: POST
      return_content: yes
      body: "{{ {'password': colab_user_password_init, 'fullname': colab_email, 'description': '', 'roles': [ 'User' ], 'context': {} } | to_json }}"
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.json }}'}"
    when: item.failed == false
    register: create_results
    ignore_errors: yes
    with_items: "{{ token_results.results }}"
  - name: Reset CML Passwords
    uri:
      url: "{{ item.item + '/api/v0/users/' + colab_username + '/change_password' }}"
      method: PUT
      return_content: yes
      body_format: json
      body: "{{ {'old_password': '', 'new_password': colab_user_password_final} }}"
      validate_certs: no
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'Authorization': 'Bearer {{ item.json }}'}"
    when: item.failed == false
    register: create_results
    ignore_errors: yes
    with_items: "{{ token_results.results }}"
  - name: Add CML Change Password failures to CML results
    vars:
      temp_list: [{ 'server': '{{ item.item.item }}', 'status_code': '{{ item.status }}' }]
    set_fact:
      cml_results: "{{ cml_results + temp_list }}"
    when: item.get('failed') == true
    ignore_errors: yes
    with_items: "{{ create_results.results }}"
  - name: Add CML Change Password Success to CML results
    vars:
      temp_list: [{ 'server': '{{ item.item.item }}', 'status_code': '{{ item.status }}' }]
    set_fact:
      cml_results: "{{ cml_results + temp_list }}"
    when: item.get('failed') == false
    ignore_errors: yes
    with_items: "{{ create_results.results }}"
  - name: Generate CML Message Header
    set_fact:
      message: "{{ ' - CML username is ' + colab_user_username + '\n' }}"
  - name: Create Success messages for CML
    set_fact:
      message: "{{ message + '    - ' + item.server.replace('https://', '') + ' ' + 'Success! \n' }}"
      check_flag: true
    when: item.status_code == '200'
    with_items: "{{ cml_results }}"
  - name: Create Fail messages for CML
    set_fact:
      message: "{{ message + '    - ' + item.server.replace('https://', '') + ' ' + 'Failed: ' + item.status_code + ' \n' }}"
    when: item.status_code != '200'
    with_items: "{{ cml_results }}"
  - name: Reset AWS Account Password
    iam:
      iam_type: user
      name: "{{ colab_username }}"
      state: update
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      password: "{{ colab_user_password_final }}"
      update_password: always
    register: iam_user_reset
    ignore_errors: true
  - name: Create Reset Success message for AWS
    set_fact:
      message: "{{ message + ' - AWS username ' + colab_username + '\n' + '    - ' + 'aws.amazon.com Success!\n' }}"
    when: iam_user_reset.failed == false and successful_aws_creation == false
    ignore_errors: true

- hosts: login
  gather_facts: no
  connection: ssh
  ignore_unreachable: yes
  vars:
    message: "{{ hostvars['localhost']['message']"
  tasks:
    - name: Add user to login server
      user:
        name: "{{ colab_user_username }}"
        password: "{{ hostvars['localhost']['colab_user_password_final'] | password_hash('sha512', 'mysecretsalt')}}"
        update_password: always
        groups: docker
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
      ignore_errors: true
      register: login_server_user
    - name: Create Success message for Login Server
      set_fact:
        message: "{{ hostvars['localhost']['message'] + ' - Centos Login Server username is ' + colab_user_username + '\n' + '    - ' + inventory_hostname + ' Success! \n' }}"
      when: login_server_user.changed == true and login_server_user.failed == false
      ignore_errors: true
    - name: Create Fail message for Login Server
      set_fact:
        message: "{{ hostvars['localhost']['message'] + ' - Centos Login Server username is ' + colab_user_username + '\n' + '    - ' + inventory_hostname + ' Failed! \n' }}"
      when: login_server_user.failed == true
      ignore_errors: true

- hosts: localhost
  connection: local
  gather_facts: no
  ignore_unreachable: yes
  tasks:
  - name: Add user and/or reset passord in vCenter 6.7
    vcenter_user_admin:
      user: "{{ colab_user_username }}"
      user_password_init: "{{ colab_user_password_init }}"
      user_password_final: "{{ colab_user_password_final }}"
      vcenter_user_group: "{{ vcenter_user_group }}"
      vcenter_admin_username: "{{ vcenter_admin_username }}"
      vcenter_admin_password: "{{ vcenter_admin_password }}"
      vcenter_address: "{{ vcenter_address }}"
      action: "create_or_reset"
    no_log: False
    ignore_errors: True
  - pause:
      seconds: 5
- hosts: localhost
  connection: local
  gather_facts: no
  ignore_unreachable: yes
  tasks:
  - name: Add user and/or reset passord in vCenter 6.7
    vcenter_user_admin:
      user: "{{ colab_user_username }}"
      user_password_init: "{{ colab_user_password_init }}"
      user_password_final: "{{ colab_user_password_final }}"
      vcenter_user_group: "{{ vcenter_user_group }}"
      vcenter_admin_username: "{{ vcenter_admin_username }}"
      vcenter_admin_password: "{{ vcenter_admin_password }}"
      vcenter_address: "{{ vcenter_address }}"
      action: "create_or_reset"
    no_log: False
    register: vcenter_result
    ignore_errors: True
  - name: Create Success message for vCenter
    set_fact:
      message: "{{ hostvars[groups['login'][0]].message + ' - HX VMware username is ' + colab_user_username + '@ciscops.net\n' + '    -    ' + vcenter_address + ' Success! \n' }}"
    when: vcenter_result.changed == true
    ignore_errors: true
  - name: Create Fail message for vCenter
    set_fact:
      message: "{{ hostvars[groups['login'][0]].message + ' - HX VMware username is ' + colab_user_username + '@ciscops.net\n' + '    -    ' + vcenter_address + ' Failed! \n' }}"
    when: vcenter_result.changed == false
    ignore_errors: true
  - name: Get Meraki Users
    uri:
      url: "{{ 'https://api.meraki.com/api/v1/networks/' + networkId + '/merakiAuthUsers' }}"
      method: GET
      return_content: yes
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'cache-control': 'no-cache',
        'X-Cisco-Meraki-API-Key': '{{ meraki_key }}'}"
      validate_certs: no
    register: users
    ignore_errors: yes
  - name: Get Meraki Account
    set_fact:
      meraki_account_id: "{{ item.id }}"
    when: item.email == "{{ colab_user_username + '@vpn.colab.ciscops.net' }}"
    with_items: "{{ users.json }}"
    ignore_errors: true
  - name: Reset Meraki VPN Password
    uri:
      url: "{{ 'https://api.meraki.com/api/v1/networks/' + networkId + '/merakiAuthUsers/' +  meraki_account_id}}"
      method: PUT
      follow_redirects: all
      status_code: [ 200, 201 ]
      return_content: yes
      headers: "{
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Cisco-Meraki-API-Key': '{{ meraki_key }}'}"
      body_format: json
      body: "{{ {'password': colab_user_password_final} | to_json }}"
      validate_certs: no
    register: meraki_reset_password_results
    ignore_errors: yes
    when: meraki_account_id != ""
  - name: Reset Success Message
    set_fact:
      message: "{{ message + ' - VPN username is ' + colab_user_username + '@vpn.colab.ciscops.net\n' + '    - VPN server: cpn-vpn-mkdqgqzprv.dynamic-m.com ' + 'Success! \n' }}"
    when: meraki_reset_password_results.status == 200
    ignore_errors: yes
  - name: Encrypt string
    encrypt_or_decrypt_string:
      action: "encrypt"
      message: "{{ colab_user_password_final }}"
      key: "{{ cipher_vault }}"
    register: encrypted_string
  - name: Update COLABOT Directory
    update_dynamo_directory:
      action: "update"
      aws_key: "{{ aws_prod_key_vault }}"
      aws_secret: "{{ aws_prod_token_vault }}"
      aws_region: "{{ aws_prod_region_vault }}"
      dynamo_table: colab_directory
      colab_email: "{{ colab_user_email }}"
      colab_username: "{{ colab_user_username }}"
      colab_password: "{{ encrypted_string.meta }}"
    ignore_errors: True
  - name: Send WxT Message
    uri:
      url: "https://api.ciscospark.com/v1/messages"
      method: POST
      return_content: yes
      body: "{{ {'toPersonEmail': colab_user_email, 'markdown': message } | to_json }}"
      validate_certs: no
      headers: "{{ {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + wxt_bearer } }}"
  - name: Send Password
    when: check_flag == true
    uri:
      url: "https://api.ciscospark.com/v1/messages"
      method: POST
      return_content: yes
      body: "{{ {'toPersonEmail': colab_user_email, 'markdown': 'Your COLAB password: ' + colab_user_password_final } | to_json }}"
      validate_certs: no
      headers: "{{ {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + wxt_bearer } }}"
